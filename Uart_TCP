#include <string.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/event_groups.h"
#include "esp_system.h"
#include "esp_wifi.h"
#include "esp_event.h"
#include "esp_log.h"
#include "nvs_flash.h"

#include "driver/uart.h"
#include "driver/gpio.h"
#include "esp_system.h"
#include "esp_log.h"
#include "driver/uart.h"
#include "driver/gpio.h"

#include "lwip/err.h"
#include "lwip/sockets.h"
#include "lwip/sys.h"
#include "lwip/netdb.h"
#include "lwip/dns.h"

/** DEFINES **/
#define WIFI_SUCCESS 1 << 0
#define WIFI_FAILURE 1 << 1
#define TCP_SUCCESS 1 << 0
#define TCP_FAILURE 1 << 1
#define MAX_FAILURES 10

/** GLOBALS **/
#define PORT 12345
// event group to contain status information
static EventGroupHandle_t wifi_event_group;
int clientSocket ;
int client_socket;
// retry tracker
static int s_retry_num = 0;

extern esp_err_t connect_tcp_server(void);

// task tag
static const char *TAG = "WIFI";
/** FUNCTIONS **/
static QueueHandle_t uart_queue;
static const int UART_BUF_SIZE = 1024;
#define UART_NUM UART_NUM_1
#define TXD_PIN (GPIO_NUM_4)
#define RXD_PIN (GPIO_NUM_5)
#define portTICK_PERIOD_MS ( ( TickType_t ) 1000 / configTICK_RATE_HZ )





// In the tcp_server_task where you receive data from TCP:
static void tcp_server_task(void *pvParameters) {

	    struct sockaddr_in server_addr;
	    struct sockaddr_in client_addr;
	    socklen_t client_addr_len = sizeof(client_addr);

	    int listen_socket = socket(AF_INET, SOCK_STREAM, 0);
	    if (listen_socket < 0) {
	        ESP_LOGE(TAG, "Failed to create socket");
	        vTaskDelete(NULL);
	    }

	    memset(&server_addr, 0, sizeof(server_addr));
	    server_addr.sin_family = AF_INET;
	    server_addr.sin_port = htons(PORT);
	    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);

	    if (bind(listen_socket, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
	        ESP_LOGE(TAG, "Socket binding failed");
	        close(listen_socket);
	        vTaskDelete(NULL);
	    }

	    if (listen(listen_socket, 1) < 0) {
	        ESP_LOGE(TAG, "Socket listening failed");
	        close(listen_socket);
	        vTaskDelete(NULL);
	    }

	    while (1) {
	         client_socket = accept(listen_socket, (struct sockaddr*)&client_addr, &client_addr_len);
	        if (client_socket < 0) {
	            ESP_LOGE(TAG, "Error accepting connection");
	            continue;
	        }

	        ESP_LOGI(TAG, "Client connected: %s", inet_ntoa(client_addr.sin_addr));

	        while (1) {
	            char rx_buffer[UART_BUF_SIZE];
	            int bytesRead = recv(client_socket, rx_buffer, sizeof(rx_buffer), 0);
	            if (bytesRead <= 0) {
	                ESP_LOGI(TAG, "Client disconnected");
	                close(client_socket);
	                break;
	            }

	            // Send received data to UART
	            uart_write_bytes(UART_NUM, rx_buffer, bytesRead);


	        }
	    }
	}

// In the uart_task where you read data from UART:
static void uart_task(void *pvParameters) {
    uint8_t *data = (uint8_t *)malloc(UART_BUF_SIZE);
    while (1) {
        int length = uart_read_bytes(UART_NUM, data, UART_BUF_SIZE, 20 / portTICK_PERIOD_MS);

        if (length > 0) {
                  data[length] = 0;  // Null-terminate the received data
                  printf("Received data from UART: %s\n", (char *)data);

                  // Send a response back to the client
              	ssize_t bytesSent = send(client_socket, data, length, 0);

              	if (bytesSent < 0) {
              		perror("Error sending response to client");
              	}
              	free(data);
    }

}
}





//event handler for wifi events
static void wifi_event_handler(void* arg, esp_event_base_t event_base,
                                int32_t event_id, void* event_data)
{
	if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_START)
	{
		ESP_LOGI(TAG, "Connecting to AP...");
		esp_wifi_connect();
	} else if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_DISCONNECTED)
	{
		if (s_retry_num < MAX_FAILURES)
		{
			ESP_LOGI(TAG, "Reconnecting to AP...");
			esp_wifi_connect();
			s_retry_num++;
		} else {
			xEventGroupSetBits(wifi_event_group, WIFI_FAILURE);
		}
	}
}

//event handler for ip events
static void ip_event_handler(void* arg, esp_event_base_t event_base,
                                int32_t event_id, void* event_data)
{
	if (event_base == IP_EVENT && event_id == IP_EVENT_STA_GOT_IP)
	{
        ip_event_got_ip_t* event = (ip_event_got_ip_t*) event_data;
        ESP_LOGI(TAG, "STA IP: " IPSTR, IP2STR(&event->ip_info.ip));
        s_retry_num = 0;
        xEventGroupSetBits(wifi_event_group, WIFI_SUCCESS);
    }

}

// connect to wifi and return the result
esp_err_t connect_wifi()
{
	int status = WIFI_FAILURE;

	/** INITIALIZE ALL THE THINGS **/
	//initialize the esp network interface
	ESP_ERROR_CHECK(esp_netif_init());

	//initialize default esp event loop
	ESP_ERROR_CHECK(esp_event_loop_create_default());

	//create wifi station in the wifi driver
	esp_netif_create_default_wifi_sta();

	//setup wifi station with the default wifi configuration
	wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    ESP_ERROR_CHECK(esp_wifi_init(&cfg));

    /** EVENT LOOP CRAZINESS **/
	wifi_event_group = xEventGroupCreate();

    esp_event_handler_instance_t wifi_handler_event_instance;
    ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT,
                                                        ESP_EVENT_ANY_ID,
                                                        &wifi_event_handler,
                                                        NULL,
                                                        &wifi_handler_event_instance));

    esp_event_handler_instance_t got_ip_event_instance;
    ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT,
                                                        IP_EVENT_STA_GOT_IP,
                                                        &ip_event_handler,
                                                        NULL,
                                                        &got_ip_event_instance));

    /** START THE WIFI DRIVER **/
    wifi_config_t wifi_config = {
    		.sta = {
    				.ssid = "ASMAITHA-AP-02",
					.password = "Admin@123",
					.threshold.authmode = WIFI_AUTH_WPA2_PSK,
					.pmf_cfg = {
							.capable = true,
							.required = false
    				},
    		},
    };

    // set the wifi controller to be a station
    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA) );

    // set the wifi config
    ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &wifi_config) );

    // start the wifi driver
    ESP_ERROR_CHECK(esp_wifi_start());

    ESP_LOGI(TAG, "STA initialization complete");

    /** NOW WE WAIT **/
    EventBits_t bits = xEventGroupWaitBits(wifi_event_group,
            WIFI_SUCCESS | WIFI_FAILURE,
            pdFALSE,
            pdFALSE,
            portMAX_DELAY);

    /* xEventGroupWaitBits() returns the bits before the call returned, hence we can test which event actually
     * happened. */
    if (bits & WIFI_SUCCESS) {
    	printf("Connected to ap\n");
        ESP_LOGI(TAG, "Connected to ap");
        status = WIFI_SUCCESS;
    } else if (bits & WIFI_FAILURE) {
        ESP_LOGI(TAG, "Failed to connect to ap");
        printf("Failed to connect to ap\n");
        status = WIFI_FAILURE;
    } else {
        ESP_LOGE(TAG, "UNEXPECTED EVENT");
        printf("UNEXPECTED EVENT\n");
        status = WIFI_FAILURE;
    }

    /* The event will not be processed after unregister */
    ESP_ERROR_CHECK(esp_event_handler_instance_unregister(IP_EVENT, IP_EVENT_STA_GOT_IP, got_ip_event_instance));
    ESP_ERROR_CHECK(esp_event_handler_instance_unregister(WIFI_EVENT, ESP_EVENT_ANY_ID, wifi_handler_event_instance));
    vEventGroupDelete(wifi_event_group);

    return status;
}
esp_err_t init(void){
	   // Initialize UART
	    uart_config_t uart_config = {
	        .baud_rate = 115200,
	        .data_bits = UART_DATA_8_BITS,
	        .parity = UART_PARITY_DISABLE,
	        .stop_bits = UART_STOP_BITS_1,
	        .flow_ctrl = UART_HW_FLOWCTRL_DISABLE
	    };
	    uart_param_config(UART_NUM, &uart_config);
	    uart_set_pin(UART_NUM, TXD_PIN, RXD_PIN, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE);
	    uart_driver_install(UART_NUM, UART_BUF_SIZE * 2, 0, 0, NULL, 0);

	    // Create a queue to handle UART data
	    return 0;

}

// connect to the server and return the result
esp_err_t connect_tcp_server(void)
{
	struct sockaddr_in serverInfo,clientAddr = {0};
	socklen_t clientAddrLen = sizeof(clientAddr);
	char readBuffer[1024] = {0};
	memset(&serverInfo, 0, sizeof(serverInfo));
	serverInfo.sin_family = AF_INET;
	serverInfo.sin_addr.s_addr = INADDR_ANY;//0x0100007f;//inet_addr("127.0.0.1");
	serverInfo.sin_port = htons(12345);

	int sock = socket(AF_INET, SOCK_STREAM, 0);
	if (sock < 0)
	{
		ESP_LOGE(TAG, "Failed to create a socket..?");
		return TCP_FAILURE;
	}

	//
    if (bind(sock, (struct sockaddr*)&serverInfo, sizeof(serverInfo)) < 0) {
        perror("Error binding server socket");
        close(sock);
        exit(EXIT_FAILURE);
    }
    // Listen for incoming connections
    if (listen(sock, 1) < 0) {
        perror("Error listening for connections");
        close(sock);
        exit(EXIT_FAILURE);
    }

    printf("Server listening on port %d...\n", PORT);

    // Accept incoming connection
    clientSocket = accept(sock, (struct sockaddr*)&clientAddr, &clientAddrLen);
    if (clientSocket < 0) {
        perror("Error accepting connection");
        close(sock);
        exit(EXIT_FAILURE);
    }

    printf("Client connected: %s\n", inet_ntoa(clientAddr.sin_addr));

    // Read data from the client
    memset(readBuffer, 0, sizeof(readBuffer));
    ssize_t bytesRead = read(clientSocket, readBuffer, sizeof(readBuffer));
    if (bytesRead < 0) {
            perror("Error reading from client");
        } else if (bytesRead == 0) {
            printf("Client disconnected\n");
        } else {
        	printf("Received from client: %s\n", readBuffer);


            // Send a response back to the client
            const char* response ="Hello Asmaitha!" ;//"Hello Asmaitha!"

        	ssize_t bytesSent = send(clientSocket, response, strlen(response), 0);

        	if (bytesSent < 0) {
        		perror("Error sending response to client");
        	}
        }

    // Close sockets
//    close(clientSocket);
//    close(sock);


    return TCP_SUCCESS;
}

void app_main(void)
{

		esp_err_t status = WIFI_FAILURE;

		//initialize storage
		 init();
		// xTaskCreate(uart_to_tcp_task, "uart_rx_task", 1024*2, NULL, configMAX_PRIORITIES, NULL);
		esp_err_t ret = nvs_flash_init();
		if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
		  ESP_ERROR_CHECK(nvs_flash_erase());
		  ret = nvs_flash_init();
		}
		ESP_ERROR_CHECK(ret);

		// connect to wireless AP
		status = connect_wifi();
		if (WIFI_SUCCESS != status)
		{
			printf("Failed to associate to AP, dying...\n");
			ESP_LOGI(TAG, "Failed to associate to AP, dying...");
			return;
		}
		printf("WIFI Connection sucess\n");
		   uart_queue = xQueueCreate(UART_BUF_SIZE * 2, sizeof(char));

			    // Start TCP server task
			    xTaskCreate(tcp_server_task, "tcp_server_task", 4096, NULL, 5, NULL);

			    // Start UART task
			    xTaskCreate(uart_task, "uart_task", 4096, NULL, 5, NULL);
		  // xTaskCreate(tcp_server_task, "tcp_server_task", 4096, NULL, 5, NULL);
        // status = connect_tcp_server();
//		if (TCP_SUCCESS != status)
//		{
//			ESP_LOGI(TAG, "Failed to connect to remote server, dying...");
//			return;
//		}

}
